{
    "1": "To join the NERSC Users Group (NUG) Slack workspace, you can follow these steps:\n\n1. Go to the NUG Slack registration form: <https://www.nersc.gov/users/NUG/nersc-users-slack/>\n2. Fill out the form with your email address and desired Slack username.\n3. Click the \"Join Slack Workspace\" button to submit your registration.\n4. Once your registration is processed, you will receive an invitation email from Slack with instructions on how to complete the sign-up process and join the NUG Slack workspace.\n\nFor more information, you can refer to the instructions provided in the NERSC documentation: <https://docs.nersc.gov/development/build-tools/spack/#need-help-with-spack> and <https://docs.nersc.gov/development/programming-models/sycl/#support>.\n\n\n\nReferences:\n * <https://docs.nersc.gov/development/programming-models/sycl/#support>\n * <https://www.nersc.gov/users/NUG/nersc-users-slack/>\n * <https://docs.nersc.gov/development/build-tools/spack/#need-help-with-spack>",
    "2": "Users can open support tickets and make resource requests through the NERSC Help Portal, which is accessible at <https://help.nersc.gov>. This is the preferred method for contacting NERSC for account support, which is available from 8 a.m. to 5 p.m. Pacific Time on business days. Before opening a ticket, users are encouraged to search NERSC's documentation and try password resets or account changes through the Iris account management system. New users should also read the Getting Started guide. (\n\nReferences:\n * <https://docs.nersc.gov/services/jupyter/#getting-help-with-jupyter>\n * <https://docs.nersc.gov/iris/iris-for-users/#resources>\n * <https://docs.nersc.gov/getting-started/#how-to-file-a-good-ticket>\n * <https://docs.nersc.gov/getting-started/#help-desk>",
    "3": "Based on the provided information, if you want to run a short job on a GPU at NERSC, you should consider using the \"interactive\" QOS. This QOS allows you to request a single GPU node for a relatively short period of time, typically up to 2 hours. You can specify the GPU constraint in your job script using `-C gpu`.\n\nHere's an example of a Slurm job script for a short GPU job using the \"interactive\" QOS:\n\n```slurm\n#!/bin/bash\n#SBATCH --nodes 1\n#SBATCH --time 00:30:00\n#SBATCH --constraint gpu\n#SBATCH --qos interactive\n#SBATCH --account=<project_name>\n\n# set up for problem & define any environment variables here\n\nsrun -n 1 -c 1 -G 1 a.out\n\n# perform any cleanup or short post-processing here\n```\n\nReplace `<project_name>` with the name of your project and `a.out` with the name of your executable.\n\n\n\nReferences:\n * <https://docs.nersc.gov/jobs/policy/#perlmutter-gpu>",
    "4": "In a Slurm job submission script, there are several flags that are mandatory and others that are optional. Mandatory flags include:\n\n1. `#SBATCH --job-name`: This flag is used to specify a name for the job.\n2. `#SBATCH --output` and `#SBATCH --error`: These flags are used to specify the output and error files for the job, respectively.\n3. `#SBATCH --ntasks` or `#SBATCH --nodes`: These flags are used to specify the number of tasks or nodes required for the job.\n4. `#SBATCH --time`: This flag is used to specify the maximum time allowed for the job to run.\n\nOptional flags include:\n\n1. `#SBATCH --partition`: This flag is used to specify the partition or queue to which the job should be submitted.\n2. `#SBATCH --qos`: This flag is used to specify the quality of service (QoS) for the job.\n3. `#SBATCH --cpus-per-task`: This flag is used to specify the number of CPUs per task.\n4. `#SBATCH --mem`: This flag is used to specify the amount of memory required for the job.\n5. `#SBATCH --open-mode`: This flag is used to specify the mode for opening output and error files.\n6. `#SBATCH --requeue`: This flag is used to specify that the job can be requeued if it is preempted or terminated.\n7. `#SBATCH --signal`: This flag is used to specify a signal to be sent to the job before it is terminated.\n\nThese flags can be used to customize the job submission and control various aspects of the job's execution on the NERSC supercomputing center. For more detailed information, please refer to the NERSC Slurm documentation.\n\n\n\nReferences:\n * <https://docs.nersc.gov/>\n * <https://www.nersc.gov/users/getting-help/online-help-desk/>",
    "5": "The High Performance Storage System (HPSS) is a mass storage system used at NERSC for long-term storage of data that is not frequently accessed. It is a modern, flexible, and performance-oriented system that has been in use at NERSC since 1998. HPSS is intended for archival storage and is part of a collaboration between DOE labs and IBM. It uses Hierarchical Storage Management (HSM) software to ingest data onto a high-performance disk cache and automatically migrate it to a large enterprise tape subsystem for long-term retention. The disk cache in HPSS is designed to retain many days worth of new data, and the tape subsystem provides cost-effective, long-term, scalable data storage. (\n\nReferences:\n * <https://docs.nersc.gov/filesystems/archive/#introduction>",
    "6": "To find the location of `gcc` in your filepath at NERSC, you can use the `which` command. Here's how you can do it:\n\n1. Open a terminal session on your NERSC account.\n2. Type the following command and press Enter:\n\n```bash\nwhich gcc\n```\n\nThis command will search the directories listed in your `PATH` environment variable for the `gcc` executable and print its path if found. If `gcc` is not found, the command will return an empty output.\n\nFor example, if `gcc` is installed in the default location, the output might look like this:\n\n```bash\n/global/common/software/spackecp/<your_system>/<your_release>/<your_spack_version>/spack/opt/spack/linux-<your_os>/<your_compiler>/gcc-<your_gcc_version>/bin/gcc\n```\n\nReplace `<your_system>`, `<your_release>`, `<your_spack_version>`, `<your_os>`, `<your_compiler>`, and `<your_gcc_version>` with the appropriate values for your account.\n\nIf you have multiple versions of `gcc` installed, you may need to specify the version you want to find using the `which gcc-<version>` command instead.\n\nIf you're not sure which version of `gcc` you have installed, you can use the `module avail gcc` command to list all available versions and their corresponding paths. For example:\n\n```bash\nmodule avail gcc\n```\n\nThis command will display a list of all available `gcc` modules, along with their versions and paths. You can then use the path associated with the desired version to find it using the `which` command.\n\nFor more information on using `module` to manage software modules at NERSC, you can refer to the [NERSC documentation on modules](https://docs.nersc.gov/environment/lmod/).\n\nReferences:\n * <https://docs.nersc.gov/environment/lmod/#finding-modules>\n * <https://docs.nersc.gov/environment/lmod/#seeing-defaults-for-modulefiles>",
    "7": "To use `sshproxy` at NERSC, follow these steps:\n\n1. If your NERSC username is different from your local username, specify it using the `-u` option when running the `sshproxy` script:\n\n   ```\n   ./sshproxy.sh -u mynersc_username\n   ```\n\n2. If you want to specify a different output filename for the generated key pair, use the `-o` option:\n\n   ```\n   ./sshproxy.sh -u mynersc_username -o my_ssh_key\n   ```\n\n3. The `sshproxy` script will prompt you for your NERSC password and one-time password (OTP). Enter them as a single string.\n\n4. Once the script has successfully obtained the ssh key, it will be installed on your local machine and the path to the key pair will be displayed.\n\n5. Use the generated private key file to connect to NERSC systems using ssh.\n\nFor Windows users, download the `sshproxy.exe` file and follow the instructions in the NERSC documentation to install and use it.\n\nRemember, the generated ssh key is only valid for 24 hours by default. You will need to generate a new key every day to use `sshproxy`.\n\n\n\nReferences:\n * <https://docs.nersc.gov/connect/mfa/#sshproxy>\n * <https://docs.nersc.gov/connect/mfa/#sshproxy-command-line-options>\n * <https://docs.nersc.gov/connect/mfa/#using-sshproxy>",
    "8": "I'm sorry for any confusion, but according to the information provided, NERSC users cannot unsubscribe from the NERSC users email list due to the important nature of the information it contains. If you have any other questions or need assistance with other aspects of using NERSC systems, please let me know.\n\n\n\nReferences:\n * <https://docs.nersc.gov/getting-started/#email>",
    "9": "To connect to Perlmutter at NERSC, you can use Secure Shell (SSH) from your local machine. Here are the steps:\n\n1. Make sure you have established a user account and have configured Multi-Factor Authentication (MFA) at NERSC.\n2. Open a terminal or command prompt on your local machine and type the following command:\n\n   ```\n   ssh <username>@perlmutter.nersc.gov\n   ```\n\n   or\n\n   ```\n   ssh <username>@saul.nersc.gov\n   ```\n\n   Replace `<username>` with your NERSC username.\n\n3. If you have configured sshproxy, you can use the following command instead:\n\n   ```\n   ssh -i ~/.ssh/nersc <username>@perlmutter.nersc.gov\n   ```\n\n   or\n\n   ```\n   ssh -i ~/.ssh/nersc <username>@saul.nersc.gov\n   ```\n\n   This assumes your identity file is in `~/.ssh/nersc`.\n\n4. If prompted, enter your NERSC password and the one-time password (OTP) provided by your MFA device.\n\nFor more detailed instructions, you can refer to the NERSC documentation on connecting to their computational systems: <https://docs.nersc.gov/connect/>\n\n\n\nReferences:\n * <https://docs.nersc.gov/connect/#connecting-with-ssh>\n * <https://docs.nersc.gov/connect/#connect-to-nersc-computational-systems>",
    "10": "To install and use a library that does not currently exist on Perlmutter, you can follow these general steps:\n\n1. **Check if the library is available through existing modules or package managers:**\n   You can use the `module avail` command to check if there are any existing modules for the library on Perlmutter. If not, you can try using package managers like `conda` or `spack` to install the library.\n\n2. **Install the library using a package manager:**\n   If the library is not available through existing modules, you can try installing it using a package manager like `conda` or `spack`. For example, with `conda`, you can use the command `conda install <library-name>`.\n\n3. **Build and install the library from source:**\n   If the library is not available through any package manager, you will need to build and install it from source. This process can vary depending on the library, but it typically involves downloading the source code, configuring the build system, compiling the code, and installing the library.\n\n   Here's an example of building and installing a library called `jasper`:\n\n   ```shell\n   # Download the source code\n   cd /path/to/install/directory\n   wget https://github.com/openjpeg/openjpeg/releases/download/v2.3.0/openjpeg-2.3.0.tar.gz\n   tar xzf openjpeg-2.3.0.tar.gz\n\n   # Configure the build system\n   cd openjpeg-2.3.0\n   ./configure --prefix=/path/to/install/prefix\n\n   # Compile and install the library\n   make\n   make install\n   ```\n\n   Replace `/path/to/install/directory` and `/path/to/install/prefix` with the appropriate paths for your system.\n\n4. **Load the library using a module file (if available):**\n   If the library comes with a module file, you can load it using the `module load` command. The module file will set up the environment variables and load any necessary dependencies.\n\n   If the library does not come with a module file, you can create one yourself using the `modulefile` generator provided by Lmod.\n\n5. **Set environment variables:**\n   If the library does not come with a module file, you will need to set the necessary environment variables manually. For example, to set the `LD_LIBRARY_PATH` variable for a library called `mylib`, you can use the following command:\n\n   ```shell\n   export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/install/prefix/lib\n   ```\n\n\n\nReferences:\n * <https://docs.nersc.gov/connect/#perlmutter>\n * <https://docs.nersc.gov/environment/lmod/#module-hierarchies>\n * <https://docs.nersc.gov/development/languages/python/using-python-perlmutter/#cunumeric>\n * <https://docs.nersc.gov/applications/e4s/spack_environments/#spack-upstreams>\n * <https://docs.nersc.gov/development/compilers/wrappers/#use-cpe-modules-to-control-versions-of-cray-pe-modules>",
    "11": "To view your active and previous job statuses on NERSC, you can use the `squeue` command in the terminal. This command allows you to check the status of jobs running on the system, including those that are currently running and those that have completed.\n\nTo view all running jobs for the current user, use the following command:\n```bash\nsqueue --me -t RUNNING\n```\nTo view all pending jobs for the current user, use:\n```bash\nsqueue --me -t PENDING\n```\nTo view all jobs for a particular account (project), use the `-A` option followed by the NERSC project ID:\n```bash\nsqueue -A <nersc_project>\n```\nReplace `<nersc_project>` with your actual project ID.\n\nAdditionally, you can view job details, including job ID, host, job name, allocation account, charge info, submit, start and end times, and the compute nodes used, by clicking on the job ID link in the output of the `squeue` command.\n\nFor more detailed information about a job, including job transfers, DataCollect Info, and job metrics, you can use the Iris web interface. Log in to Iris at https://iris.nersc.gov, and navigate to the \"Jobs\" tab to view your jobs.\n\n\n\nReferences:\n * <https://docs.nersc.gov/jobs/monitoring/#squeue>\n * <https://docs.nersc.gov/iris/iris-for-users/#jobs>",
    "12": "Based on the information provided, it appears that your job is being killed due to exceeding the allocated time limit. NERSC's batch system, Slurm, sends a signal (USR1) to the job 60 seconds before it reaches the walltime limit. If the job does not finish within that time, it will be terminated.\n\nTo address this issue, you can modify your job script to requeue the job when it receives the USR1 signal. This will allow the job to continue running, starting from the point where it was interrupted, instead of being terminated.\n\nHere's an example of how to modify your job script:\n\n1. Add the following lines at the beginning of your job script:\n\n```bash\n#SBATCH --signal=B:USR1@60\n#SBATCH --requeue\n#SBATCH --open-mode=append\n```\n\n2. Create a function to handle the USR1 signal and requeue the job:\n\n```bash\nrequeue_job() {\n    if [[ $(squeue -j $SLURM_JOB_ID -o %J | wc -l) -gt 1 ]]; then\n        echo \"Job is already requeued, exiting.\"\n        exit\n    fi\n\n    echo \"Job is being requeued due to time limit.\"\n    sbatch <your_job_script>\n    exit\n}\n\ntrap requeue_job USR1\n```\n\n3. Add the following line at the end of your job script:\n\n```bash\nwait\n```\n\nThis modification will cause your job to requeue itself when it receives the USR1 signal, effectively allowing it to continue running.\n\nFor more information on these flags and the `requeue_job` function, please refer to the NERSC documentation on checkpointing and restarting jobs: <https://docs.nersc.gov/development/checkpoint-restart/mana/>\n\n\n\nReferences:\n * <https://docs.nersc.gov/jobs/troubleshooting/#runtime-errors>\n * <https://docs.nersc.gov/jobs/troubleshooting/#troubleshooting-jobs>\n * <https://docs.nersc.gov/development/checkpoint-restart/mana/#perlmutter-cpu>\n * <https://docs.nersc.gov/development/checkpoint-restart/mana/examples/pm-cpu-mana-preempt-vt.sh>\n * <https://docs.nersc.gov/jobs/monitoring/#job-accounting>",
    "13": "To cancel all jobs owned by your user account on NERSC, you can use the `scancel` command with the `-u` flag followed by your username. However, it's important to note that canceling jobs in bulk can cause a degradation of service due to the high number of remote procedure calls to the Slurm daemon. Therefore, it's recommended to cancel jobs by subset instead.\n\nHere's the command to cancel all jobs owned by your user account:\n\n```bash\nscancel -u $USER\n```\n\nIf you want to cancel a specific job, use the job ID instead:\n\n```bash\nscancel $JobID\n```\n\nKeep in mind that canceling jobs may result in lost work if the jobs were in the middle of processing. Always double-check that you want to cancel a job before executing the command.\n\n\n\nReferences:\n * <https://docs.nersc.gov/jobs/monitoring/#updating-jobs>\n * <https://docs.nersc.gov/jobs/workflow/scrontab/#canceling-a-scrontab-job>",
    "14": "To run a job on a CPU at NERSC, you need to prepare a job script and submit it to the batch system using Slurm. Here's a general outline of the steps:\n\n1. Prepare your job script:\n   - Write a Slurm job script that specifies the number of nodes and cores, the queue, and the time limit for your job.\n   - Load the required modules for your application.\n   - Include the command to run your application.\n\n2. Submit the job:\n   - Make sure you have the Slurm module loaded.\n   - Submit the job using the `sbatch` command followed by the name of your job script.\n\nHere's an example of a job script for running a CPU-bound job on Perlmutter:\n\n```slurm\n#!/bin/bash\n#SBATCH -N 1\n#SBATCH -C cpu\n#SBATCH -J my_job_name\n#SBATCH -o my_job_name-%j.out\n#SBATCH -e my_job_name-%j.err\n#SBATCH --time=01:00:00\n\nmodule load my_module\nsrun my_application\n```\n\nReplace `my_job_name`, `my_module`, and `my_application` with the appropriate names for your job, module, and application.\n\nFor more information on preparing and submitting jobs, refer to the NERSC documentation:\n\n* [Preparing and Submitting Jobs](https://docs.nersc.gov/jobs/preparing/)\n* [Slurm User Guide](https://docs.nersc.gov/jobs/slurm/)\n\n\n\nReferences:\n * <https://docs.nersc.gov/jobs/examples/prepare-env/prepare-env.sh>\n * <https://docs.nersc.gov/applications/vasp/examples/perlmutter-cpu-v5.sh>\n * <https://docs.nersc.gov/jobs/workflow/taskfarmer/#step-3-create-a-batch-script-submittaskfarmersl>",
    "15": "According to the NERSC documentation, you do not necessarily need a VPN to SSH into Perlmutter if you are offsite. However, you may need to set up Multi-Factor Authentication (MFA) for your account and configure your SSH client accordingly. You can use sshproxy or generate an SSH key for your account to streamline the authentication process. For more information, please refer to the NERSC documentation on SSH configuration and MFA.\n\n\n\nReferences:\n * <https://docs.nersc.gov//global/cfs/cdirs/nstaff/chatbot/production_code/data/nersc_doc/docs/connect/mfa/#sshproxy>\n * <https://docs.nersc.gov/connect/#connecting-with-ssh>\n * <https://docs.nersc.gov/connect/mfa/#ssh-configuration-file-options>",
    "16": "If your project runs out of time, you will be restricted from submitting new jobs to the default queues on NERSC systems. However, you can still run jobs in the \"overrun\" queue. To do this, you need to submit your job with the `-q overrun` flag and the `--time-min` flag set to the minimum time your job can run before being preempted. This will help the system fit your job into the queue more easily and potentially allow it to start sooner.\n\nKeep in mind that overrun jobs are subject to preemption by higher priority workloads under certain circumstances. To save your progress, it is recommended to implement checkpoint/restart for your overrun jobs.\n\nFor more information, you can refer to the NERSC documentation on resource usage, jobs, and checkpoint-restart.\n\n\n\nReferences:\n * <https://docs.nersc.gov/policies/resource-usage/#running-out-of-allocation>\n * <https://docs.nersc.gov/applications/vasp/examples/long-time.sh>\n * <https://docs.nersc.gov/jobs/troubleshooting/#troubleshooting-jobs>\n * <https://docs.nersc.gov/development/checkpoint-restart/mana/#perlmutter-cpu>",
    "17": "To write a script for submitting a job to Perlmutter at NERSC, you'll need to create a batch script that includes the necessary directives for the Slurm scheduler. Here's a basic example using Fortran as the application:\n\n1. First, create a script named `myjob.slurm` with the following content:\n\n```slurm\n#!/bin/bash\n#SBATCH --job-name=myjob\n#SBATCH --output=myjob.%j.out\n#SBATCH --error=myjob.%j.err\n#SBATCH --time=01:00:00\n#SBATCH --nodes=1\n#SBATCH --ntasks-per-node=1\n#SBATCH --partition=normal\n#SBATCH --qos=normal\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=your_email@nersc.gov\n\nmodule load intel/2021.5\nmodule load openmpi/4.1.3\nmodule load my_application/1.0\n\nsrun my_application > myjob.%j.out 2>&1\n```\n\nReplace `my_application` with the name of your application and `your_email@nersc.gov` with your NERSC email address.\n\n2. Make the script executable:\n\n```bash\nchmod +x myjob.slurm\n```\n\n3. Submit the job to the Slurm queue:\n\n```bash\nsbatch myjob.slurm\n```\n\nThis example assumes that your application is installed in the `/apps` directory and uses Intel MPI and Intel compiler. Adjust the script as needed for your specific application and environment.\n\nFor more information on Slurm directives and options, refer to the [Slurm documentation](https://docs.nersc.gov/jobs/).\n\nReferences:\n * <https://docs.nersc.gov/jobs/>",
    "18": "To set up Multi-Factor Authentication (MFA) for your NERSC account, follow these steps:\n\n1. Request a one-time password (OTP) from Iris:\n   - Go to the Iris login page (<https://iris.nersc.gov>) and click the 'MFA not working?' link.\n   - Enter your username and password, then click OK.\n   - A dialog box will appear asking if you want to create a new MFA token. Click OK.\n   - NERSC will send an email with a single-use OTP. Use this OTP to log into Iris and set up a new MFA token.\n\n2. Install the authenticator app on your mobile device and enable MFA in your Iris account:\n   - Install the authenticator app (Google Authenticator, Microsoft Authenticator, or Authy) on your mobile device.\n   - Log into Iris using your username, password, and the OTP from the email.\n   - Go to the 'Security' tab in your Iris account settings and click 'Add a new MFA token'.\n   - Scan the QR code displayed on the Iris page with your authenticator app.\n   - Enter the verification code generated by the authenticator app into the Iris verification field.\n\n3. Set up MFA for other NERSC resources:\n   - If you use other NERSC resources, you will need to set up MFA for each one individually. The process is similar to the one described above.\n\nFor more detailed instructions, please refer to the NERSC documentation on MFA: <https://docs.nersc.gov/connect/mfa/>\n\n\n\nReferences:\n * <https://docs.nersc.gov/connect/mfa/#if-you-lost-your-tokens>",
    "19": "Based on the provided information, there could be several reasons why you might be unable to log into NERSC systems. Here are some common issues and their solutions:\n\n1. Incorrect username or password: If you're unable to log in due to an incorrect username or password, try logging into Iris (<https://iris.nersc.gov>) to clear any login failures. Your NERSC user name and password, along with a one-time Multi-Factor Authentication (MFA) password, are required for login.\n\n2. MFA issues: If you've enabled Multi-Factor Authentication (MFA) and are experiencing repeated login failures, ensure that you're using the correct OTP (One-Time Passcode) or have the correct authentication application installed and configured. You can also try using ssh-agent or ssh keys for authentication instead of MFA.\n\n3. Connection issues: Check if you can connect to NERSC systems using SSH directly. If you're unable to do so, there might be a network issue or a problem with your connection settings.\n\n4. Login failures: If you've exceeded the maximum number of login attempts, your account will be locked. In this case, you'll need to wait for 5 minutes before trying to log in again.\n\n5. Configuration issues: Ensure that your NERSC connection file is up-to-date and correctly configured. If you're using NoMachine, try creating a new connection file following the instructions provided in the NERSC documentation.\n\nIf none of the above solutions work, please contact the NERSC Account Support Office at accounts@nersc.gov for further assistance.\n\n\n\nReferences:\n * <https://docs.nersc.gov/connect/mfa/#q-i-have-enabled-mfa-my-logins-fail-repeatedly-what-should-i-do>\n * <https://docs.nersc.gov/services/jupyter/reference/#jupyterlab-server-logs>\n * <https://docs.nersc.gov/services/spin/faq/#why-are-ip-addresses-in-the-10420016-range-showing-in-my-web-service-access-log>\n * <https://docs.nersc.gov/iris/iris-for-users/#problems-accessing-iris>\n * <https://docs.nersc.gov/connect/nx/#troubleshooting-nx-connection-failures>\n * <https://docs.nersc.gov/jobs/monitoring/#how-to-log-into-compute-nodes-running-your-jobs>\n * <https://docs.nersc.gov/accounts/passwords/#login-failures>\n * <https://docs.nersc.gov/development/languages/python/faq-troubleshooting/#why-does-my-mpi4py-time-out-or-why-is-it-so-slow>",
    "20": "The choice of a file system at NERSC depends on the intended use of your data. Here are some recommendations based on the information provided:\n\n1. For frequently accessed data or data that is being actively changed, use the Perlmutter scratch file system. It offers the fastest I/O performance and is designed for temporary storage.\n2. For large data files that are not frequently accessed, consider using the HPSS (High Performance Storage System). It is intended for long-term storage and can handle large files up to several TBs.\n3. For project-specific data that is not time-sensitive, use the Common or Community file systems. These file systems are designed for project-specific data and are accessible to all members of a project.\n\nWhen deciding which file system to use, consider the size, access frequency, and intended use of your data. For more information, you can refer to the NERSC documentation on file systems.\n\n\n\nReferences:\n * <https://docs.nersc.gov/performance/io/#best-practices-for-scientific-io>\n * <https://docs.nersc.gov/filesystems/#summary>\n * <https://docs.nersc.gov/filesystems/#local-storage>\n * <https://docs.nersc.gov/filesystems/archive/#best-practices>"
}