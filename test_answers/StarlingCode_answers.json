{
    "1": "To join the NERSC Users Group (NUG) Slack workspace, you can follow the steps outlined in the provided information source: [NERSC Users Slack](https://www.nersc.gov/users/NUG/nersc-users-slack/). Here's a brief overview of the process:\n\n1. Visit the provided URL: [NERSC Users Slack](https://www.nersc.gov/users/NUG/nersc-users-slack/)\n2. Click on the \"Join Slack\" button to initiate the registration process.\n3. Complete the registration form with your required information.\n4. Once registered, you will receive an email confirmation. Follow the instructions in the email to verify your account.\n5. After verifying your account, you will gain access to the NERSC Users Group Slack workspace, where you can interact with other users, ask questions, and seek support.\n\nRemember to log in to Slack regularly to stay updated on the latest discussions and announcements related to NERSC and its resources.\n\n\n\nReferences:\n * <https://www.nersc.gov/users/NUG/nersc-users-slack/>",
    "2": "Users can open support tickets and make resource requests through the NERSC Help Portal, which can be accessed at <https://help.nersc.gov>. This is the preferred method for contacting NERSC and ensures that your request will be handled efficiently.\n\nHere are some additional tips for getting help with Jupyter at NERSC:\n\n- If you run into problems with Jupyter or have questions about how to use it, please use the NERSC Help Portal to open a ticket and we will get back to you as soon as possible. Before opening your ticket, you may want to examine your Jupyter logs, which can be found at <https://docs.nersc.gov//global/cfs/cdirs/nstaff/chatbot/production_code/data/nersc_doc/docs/services/jupyter/reference/#jupyter-server-logs>.\n\n- You may also find the #jupyter channel on the NERSC User Group Slack to be a useful resource where fellow users share knowledge, experiences, and advice. However, to get help from NERSC staff, use the NERSC Help Portal.\n\nFor more information on opening support tickets and making resource requests, you can refer to the NERSC Help Portal at <https://help.nersc.gov>.\n\n\n\nReferences:\n * <https://docs.nersc.gov/services/jupyter/#getting-help-with-jupyter>\n * <https://docs.nersc.gov/getting-started/#help-desk>",
    "3": "For running a short job on a GPU at NERSC, you should use the \"debug\" QOS. This QOS allows you to allocate GPU nodes for a shorter duration, making it suitable for quick tasks. Here's an example of how you can request a GPU node with the \"debug\" QOS using the Slurm `salloc` command:\n\n```\nsalloc --nodes 1 --qos debug --time 00:20:00 --constraint gpu -A m0000\n```\n\nThis command requests one GPU node for 20 minutes (00:20:00) and allocates it under the \"debug\" QOS. Replace `m0000` with the account you want to charge hours from.\n\nRemember, the \"debug\" QOS is specifically designed for short jobs and provides a quicker allocation compared to other QOS options.\n\nReferences:\n * <https://docs.nersc.gov/jobs/interactive/#perlmutter-debug-qos>",
    "5": "The High Performance Storage System (HPSS) is a modern, flexible, performance-oriented mass storage system. It has been used at NERSC for archival storage since 1998. HPSS is intended for long term storage of data that is not frequently accessed.\n\n\n\nReferences:\n * <https://docs.nersc.gov/getting-started/#high-performance-storage-system-hpss-archival-storage>",
    "6": "To find the location of `gcc` in your filepath, you can use the `which` command in the terminal. Here's an example of how to use it:\n\n```bash\nwhich gcc\n```\n\nThis command will display the path to the `gcc` executable. For instance, if you see `/usr/bin/gcc` as the output, it means that `gcc` is located in the `/usr/bin` directory of your filepath.\n\nHere's an example of how the output might look:\n\n```\n/usr/bin/gcc\n```\n\nBy using the `which` command, you can easily locate the `gcc` executable in your filepath.\n\nReferences:\n * <https://docs.nersc.gov/development/compilers/base/#gnu>",
    "7": "To use sshproxy, follow these steps:\n\n1. Download the bash client `sshproxy.sh` via scp:\n   ```\n   scp myusername@dtn01.nersc.gov:/global/cfs/cdirs/mfa/NERSC-MFA/sshproxy.sh .\n   ```\n   Replace `myusername` with your NERSC login ID.\n\n2. Run the `sshproxy.sh` script from where you installed it. The script will prompt you to enter your password and OTP. Enter your NERSC password followed by OTP as a single string.\n\n3. If your NERSC username is not the same as your local username, you can specify your NERSC username with the `-u` option:\n   ```\n   ./sshproxy.sh -u myusername\n   ```\n\n4. If you would like to have a different name for the PPK file, you can use the `-o` option to specify the output filename:\n   ```\n   ./sshproxy.sh -u myusername -o mynersc.ppk\n   ```\n\n5. The private and public key will have the names `nersc` and `nersc-cert.pub`, and will be stored in your `~/.ssh` directory.\n\n6. The `-a` option can be used to automatically add the new key to your `ssh-agent`. It will also be set with an expiration that matches the keys' expiration so that ssh does not try to use the key after it has expired.\n\n7. If your computer has an old version of ssh (e.g., OpenSSH_7.2), you may have to use the `-a` flag. Otherwise, ssh and scp commands will require additional flags to work as in the example cases shown below. To see the version info, run the command, `ssh -V`.\n\n8. For Windows users, download the Windows executable `sshproxy.exe` from the following link:\n   ```\n   /global/cfs/cdirs/mfa/NERSC-MFA/sshproxy.exe\n   ```\n\n9. To configure a NERSC connection using NoMachine, follow these steps:\n   1. Install sshproxy on your laptop and generate an SSH key. Note that you must do this once every day to generate a new key.\n   2. Open the NoMachine client and click on the green Add icon in the upper left corner.\n   3. Under Address > Host, enter `nxcloud01.nersc.gov`.\n   4. Under Address > Protocol, set it to `ssh`. This should automatically change the Port to 22.\n   5. Under Configuration > Authentication, select \"use key-based authentication with a key you provide\".\n   6. Click Modify. Fill in the path to the ssh key you generated (usually `~/.ssh/nersc`).\n\nRemember to replace `myusername` with your actual NERSC login ID and follow the steps accordingly to successfully use sshproxy.\n\nReferences:\n * <https://docs.nersc.gov/connect/mfa/#sshproxy-command-line-options>\n * <https://docs.nersc.gov/connect/nx/#configure-a-nersc-connection>\n * <https://docs.nersc.gov/connect/mfa/#installing-the-client>",
    "8": "Unfortunately, as a NERSC user, you cannot unsubscribe from the NERSC users email list due to the important nature of the information it provides. The list is essential for keeping users informed about various aspects of the NERSC system and its operations.\n\nHowever, if you have any specific concerns or questions regarding the content of the emails, you can reach out to the NERSC support staff for assistance. They are available to help you with any issues or inquiries you may have.\n\nHere are some ways to get in touch with the NERSC support staff:\n\n1. Visit the NERSC website at <https://www.nersc.gov/> and navigate to the \"Contact Us\" section, where you can find various contact options such as email, phone, and online forms.\n2. Log in to your NERSC account and access the \"Support\" section, where you can submit support requests, view existing requests, and access other support resources.\n3. Attend one of the NERSC training sessions or workshops, where you can interact with the support staff and other users to get answers to your questions. You can find the schedule of upcoming events on the NERSC website.\n4. Participate in the NERSC user mailing lists, where you can ask questions and engage in discussions with other users and the support staff. You can subscribe to these mailing lists by visiting the NERSC website and following the instructions provided.\n\nRemember, the NERSC support staff is dedicated to assisting you and ensuring that you have a smooth experience using the NERSC supercomputing resources. Don't hesitate to reach out to them if you need help or have any concerns.\n\nReferences:\n * <https://docs.nersc.gov/iris/iris-for-users/#navigational-items-at-the-top>\n * <https://docs.nersc.gov/accounts/policy/#account-deactivation>\n * <https://docs.nersc.gov/getting-started/#email>\n * <https://docs.nersc.gov/jobs/monitoring/#email-notification>\n * <https://docs.nersc.gov/iris/iris-for-pis/#navigational-items-at-the-top>",
    "9": "To connect to Perlmutter, you can use an SSH client to log into the system. Here are the steps:\n\n1. Open an SSH client on your system and enter the following command:\n   ```\n   ssh <username>@perlmutter.nersc.gov\n   ```\n   or\n   ```\n   ssh <username>@saul.nersc.gov\n   ```\n\n   If you have generated a temporary SSH key using `sshproxy`, the command will connect you to one of Perlmutter's login nodes. If you haven't generated a temporary SSH key, you will be challenged for your Iris password and one-time password (OTP) before connecting you to a login node.\n\n2. If you are using a system without an SSH client installed, you can connect to Perlmutter via the NoMachine client. Here's how:\n\n   - Click the yellow Connect button at the top right. Enter your NERSC username.\n   - Verify the key. Create a new desktop. You should land at the NERSC homescreen.\n   - You can connect to Perlmutter via the green buttons on the left-hand menu. GNOME desktop. If you click `x` without logging out, your session may hang, which will prevent you from starting a new session. If you think this has happened to you, please open a ticket at `help.nersc.gov` so we can help you reset your NoMachine access.\n\n3. To use this connection in the future, when you start the NoMachine client, just click on the icon you named \"Connection to NERSC.\"\n\n4. If you prefer to authenticate with a password and OTP, follow these steps:\n\n   - Open the NoMachine client and click on the green Add icon in the upper left corner.\n   - Under Address > Name the connection something like \"Connection to NERSC.\"\n   - Under Address > Protocol, set it to `ssh`. This should automatically change the Port to 22.\n   - Under Configuration > Authentication, select \"Use password authentication.\"\n   - Click the yellow Connect button in the top right corner.\n   - Type your NERSC username and password+OTP. Don't save your password in the connection file; you will need to enter a new OTP every time you log on.\n   - Verify the key. Create a new desktop. You should land at the NERSC homescreen.\n   - You can connect to Perlmutter via the green buttons on the left-hand menu.\n   - To safely log out, click the `log out` button on the left-hand menu of the desktop.\n\n5. If you prefer to authenticate via `sshproxy`, follow these steps:\n\n   - Configure your SSH client to use `sshproxy`. You can find detailed instructions in the NERSC documentation.\n   - Run the following command:\n     ```\n     ssh -i ~/.ssh/nersc <username>@perlmutter.nersc.gov   # or 'ssh -i ~/.ssh/nersc <username>@saul.nersc.gov'\n     ```\n\n   This assumes your identity file is in `~/.ssh/nersc`. The `sshproxy` route is convenient if you have multiple SSH connections without having to authenticate every time.\n\nRemember to replace `<username>` with your actual NERSC username.\n\n\n\nReferences:\n * <https://docs.nersc.gov/connect/#connecting-with-ssh>\n * <https://docs.nersc.gov/connect/#connecting-to-perlmutter-with-a-collaboration-account>",
    "10": "To install and use a library that currently does not exist on Perlmutter, you can follow these steps:\n\n1. **Check the availability of the library:** Before installing the library, it's essential to verify if it's available on Perlmutter. You can use the `module avail` command to check if the library is listed. For example, if you want to check the availability of a library called \"mylib\", you can run:\n\n   ```shell\n   module avail mylib\n   ```\n\n   If the library is available, you will see a list of modules related to \"mylib\". If it's not available, you will receive a message indicating that no module(s) or extension(s) were found.\n\n2. **Install the library:** If the library is not available, you can install it using the appropriate package manager. For instance, you can use `spack` to install the library. Here's an example of how to install a library called \"mylib\" using `spack`:\n\n   ```shell\n   spack install mylib\n   ```\n\n   This command will install the library in the default location specified by `spack`. Make sure you have the necessary permissions to install software on Perlmutter.\n\n3. **Load the library:** After installing the library, you need to load it into your environment using the `module load` command. For example, to load the \"mylib\" library, you can run:\n\n   ```shell\n   module load mylib\n   ```\n\n   This command will set up the necessary environment variables and dependencies for using the library.\n\n4. **Use the library:** Once the library is loaded, you can use it in your code or scripts. The specific usage of the library depends on its documentation and requirements. Make sure to follow the library's documentation to ensure proper usage.\n\n5. **Check the library's version:** If you need to know the version of the library you installed, you can use the `module list` command. For example, to check the version of the \"mylib\" library, you can run:\n\n   ```shell\n   module list mylib\n   ```\n\n   This command will display the loaded modules, including the version of the \"mylib\" library.\n\n6. **Unload the library:** When you are done using the library, it's a good practice to unload it from your environment. This helps in managing the system resources and ensures a clean environment for future tasks. To unload the \"mylib\" library, you can use the `module unload` command:\n\n   ```shell\n   module unload mylib\n   ```\n\n   This command will remove the library from your environment, but it will not uninstall it from the system.\n\nRemember to always refer to the library's documentation and guidelines for proper usage and any specific requirements.\n\n\n\nReferences:\n * <https://docs.nersc.gov/development/containers/shifter/examples/#star>\n * <https://docs.nersc.gov/applications/wrf/wrf/#example-wrf-build-script-for-perlmutter>\n * <https://docs.nersc.gov/applications/e4s/spack_environments/#spack-upstreams>\n * <https://docs.nersc.gov/environment/lmod/#module-hierarchies>\n * <https://docs.nersc.gov/connect/#perlmutter>\n * <https://docs.nersc.gov/applications/wrf/wps/#example-build-script-for-the-jasper-external-library>",
    "11": "To view your active and previous job statuses at NERSC, you can use the `squeue` command. Here are some key commands and their explanations:\n\n- To view all running jobs for the current user, use:\n```\nsqueue --me -t RUNNING\n```\n- To view all pending jobs for the current user, use:\n```\nsqueue --me -t PENDING\n```\n- To view all pending jobs in QOS `shared`, use:\n```\nsqueue -q shared -t PENDING\n```\n- To view all running jobs for the current user on `shared` QOS, use:\n```\nsqueue --me -q shared -t RUNNING\n```\n- To view all jobs for a particular account (project), use:\n```\nsqueue -A <nersc_project>\n```\n- To view filter jobs, use the `-j` option followed by the job ID. You can specify multiple job IDs separated by commas.\n\nFor example, if you want to view all pending jobs in the QOS `shared`, you can use the command `squeue -q shared -t PENDING`. This will display a list of pending jobs along with their details, such as job ID, partition, name, user, status, time, nodes, and node list (reason).\n\nAdditionally, if you are using the Iris system at NERSC, you can also check your job statuses on the Iris web portal. Here are some relevant commands and explanations:\n\n- By default, the Iris page lists the CPU jobs run for the last one month. To view job data with different start and end dates or for a specific host (e.g., `perlmutter cpu`, `perlmutter gpu`, ...), enter the appropriate values for your search, and click the 'Load Jobs' button.\n- Clicking on a job ID link from the displayed result, you will see a summary about the job such as host; job name; allocation account; charge info; submit, start and end times; the compute nodes used, etc.\n- Scrolling down the page, you can find a section titled 'Job Transfers'. This area provides a record of all deposits and withdrawals made to/from your project's allocation accounts.\n- Below it, there is another section titled 'DataCollect Info'. When the 'More Info' button is clicked, it shows details for individual job steps (that is, individual `srun` instances), such as the working directory, arguments, `srun` parameters, etc.\n- At the bottom of the page, there is the 'Display Job Metrics' section, still in an experimental stage, which, when fully implemented, will display plots of some performance data (e.g., instructions per cycle (`ipc_by_step` and `ipc_by_step_and_node`) and memory usage) and power usage of the job. Select a metric and then click the 'View graph' button.\n\nRemember to replace `<nersc_project>` with your actual project ID when using the `squeue` command with the `-A` option.\n\nIn summary, to view your active and previous job statuses at NERSC, you can use the `squeue` command for command-line access or the Iris web portal for a more user-friendly interface.\n\nReferences:\n * <https://docs.nersc.gov/jobs/monitoring/#squeue>",
    "12": "Jobs at NERSC can be killed due to several reasons, including reaching the allocated time limit, exceeding the allocated memory limit, or due to system maintenance. Here are some steps you can take to troubleshoot and resolve the issue:\n\n1. **Check the job status**: Use the `squeue` command to check the status of your job. Look for any error messages or warnings that might indicate why your job was killed. For example, you might see an error message like `srun: error: eio_handle_mainloop: Abandoning IO 60 secs after job shutdown initiated`. This error occurs when Slurm gives up waiting for stdout/stderr to finish, typically when some ranks end early while others are still waiting to write.\n\n2. **Monitor job accounting**: Use the `sacct` command to view detailed information about your job, including its status, exit code, and the amount of time it spent running. This can help you identify any patterns or issues that might be causing your job to be killed. For example, you might notice that your job is being killed due to reaching the allocated time limit.\n\n3. **Check the job queue**: Use the `squeue` command to view the current state of the job queue. Look for any jobs that are waiting in the queue or have been preempted. If your job is waiting in the queue for a long time, it might be due to a high demand for resources or a long walltime request. You can try reducing the walltime or adjusting the priority of your job to improve its chances of running successfully.\n\n4. **Review the job script**: Ensure that your job script is correctly configured and optimized for running on NERSC systems. For example, make sure you are using the appropriate modules and libraries, and that your code is vectorized and parallelized to take full advantage of the available CPU resources.\n\n5. **Contact NERSC support**: If you are still experiencing issues after following the steps above, consider reaching out to the NERSC support team for assistance. They can provide more in-depth guidance and help you troubleshoot any underlying problems that might be causing your job to be killed.\n\nRemember, optimizing your code for performance on NERSC systems is an ongoing process. Regularly reviewing and updating your code to take advantage of new features and optimizations can help improve its efficiency and reduce the likelihood of it being killed due to resource constraints.\n\nHere are some additional resources you might find helpful:\n\n- [NERSC Job Troubleshooting](https://docs.nersc.gov/jobs/troubleshooting/)\n- [NERSC Job Monitoring](https://docs.nersc.gov/jobs/monitoring/)\n- [NERSC Development: Checkpoint Restart](https://docs.nersc.gov/development/checkpoint-restart/)\n- [NERSC Development: DMTCP](https://docs.nersc.gov/development/checkpoint-restart/dmtcp/)\n\nBy following these steps and utilizing the available resources, you should be able to identify and resolve the issues causing your job to be killed at NERSC.\n\nReferences:\n * <a/>",
    "13": "To remove a scontab job from your running jobs, you can edit the scontab file with `scrontab -e` and comment out all the lines associated with the entry. However, using the `scancel` command on a scontab job will give a warning and cannot modify scrontab jobs through `scontrol`. \n\nTo cancel all jobs owned by a user, you can use the command `scancel -u $USER`. However, it is recommended to cancel jobs by subset instead of all at once to avoid degradation of service. \n\nFor more information on cancelling jobs, you can refer to the NERSC documentation on [cancelling jobs](https://docs.nersc.gov/jobs/monitoring/#updating-jobs).\n\nReferences:\n * <https://docs.nersc.gov/performance/vectorization>\n * <https://docs.nersc.gov/performance/parallelism>\n * <https://docs.nersc.gov/jobs/monitoring/#updating-jobs>",
    "14": "To run a job on a CPU at NERSC, you can follow these steps:\n\n1. **Optimize your code for CPU usage**: Focus on vectorization and parallelization. Vectorization allows your code to process multiple data points with a single instruction, reducing the time it takes to run through large datasets. Parallelization involves dividing your code into multiple tasks that can be processed simultaneously, maximizing the use of available CPU resources. Combining these strategies can lead to significant improvements in your code's performance on NERSC systems.\n\n2. **Create a batch script**: Prepare a batch script that specifies the total time required to run your tasks and the number of nodes you want to use. For example, if you are running on the Perlmutter CPU partition, you can use the following script:\n\n```slurm\n#!/bin/sh\n#SBATCH -N 2 -c 128\n#SBATCH -q debug\n#SBATCH -t 00:05:00\n#SBATCH -C cpu\n\ncd $SCRATCH/taskfarmer\nexport THREADS=128\n\nruncommands.sh tasks.txt\n```\n\nMake sure to load the TaskFarmer module before submitting your job.\n\n3. **Submit your job**: Once you have prepared your batch script, you can submit it to the NERSC supercomputing center using the `sbatch` command. For example, to submit the script above, you can use the following command:\n\n```bash\nsbatch prepare-env.sl\n```\n\nAfter submitting the batch script, the user environment needed for the Slurm batch job will be prepared. This includes module loading, setting up runtime environment variables, or copying input files, among other tasks. The Slurm batch script will then be generated using a here document, and the job can be submitted.\n\nRemember to replace `<my_output_file>` and `<target_location>` with the appropriate file names and locations in the `cp` command within the batch script.\n\nBy following these steps, you can successfully run a job on a CPU at NERSC.\n\nReferences:\n * <https://docs.nersc.gov/development/languages/python/parallel-python/#launching-programs>\n * <https://docs.nersc.gov/performance/vectorization>\n * <https://docs.nersc.gov/applications/vasp/examples/long-time.sh>\n * <https://docs.nersc.gov/jobs/examples/prepare-env/prepare-env.sh>\n * <https://docs.nersc.gov/applications/vasp/examples/perlmutter-cpu-v5.sh>\n * <https://docs.nersc.gov/jobs/workflow/taskfarmer/#step-3-create-a-batch-script-submittaskfarmersl>",
    "15": "To access Perlmutter, you can simply ssh into it without needing a VPN if you are offsite. Here's an example of how to do it:\n\n```\nssh <username>@perlmutter.nersc.gov   # or 'ssh <username>@saul.nersc.gov'\n```\n\nHowever, if you have generated a temporary SSH key using `sshproxy`, then this command will connect you to one of Perlmutter's login nodes. If you haven't generated a temporary SSH key, SSH will challenge you for your Iris password as well as your one-time password (OTP) before connecting you to a login node.\n\nIt's important to note that users are strongly encouraged to use the most up-to-date versions of SSH clients available.\n\n\n\nReferences:\n * <https://docs.nersc.gov/connect/#connecting-with-ssh>",
    "16": "If your project runs out of time, your project will be restricted to the \"overrun\" and \"xfer\" queue. This means that your jobs will be stuck indefinitely and you should consider killing them. \n\nTo avoid this situation, it's important to monitor your project's allocation and ensure that you don't exceed your allocated time. If your project is consistently running out of time, you may need to optimize your code or reduce the amount of time your jobs are running. \n\nAdditionally, it's worth noting that if your account incurs a negative balance, your project will be restricted to the overrun and xfer queue. In this case, you can still run jobs, but they will be charged to the overrun partition. \n\nFor more information on managing your project's allocation and understanding the different queue policies, you can refer to the NERSC documentation on [queue policies](https://docs.nersc.gov/policies/resource-usage/#running-out-of-allocation) and [troubleshooting jobs](https://docs.nersc.gov/jobs/troubleshooting/#troubleshooting-jobs). \n\nHere are some tips to optimize your code for better performance on NERSC systems:\n\n1. **Vectorization**: Vectorization allows your code to process multiple data points with a single instruction, effectively reducing the time your code takes to run through large datasets. You can use vectorized instructions provided by libraries like Intel's MKL or OpenBLAS to speed up your code.\n\n2. **Parallelization**: Parallelization involves dividing your code into multiple tasks that can be processed simultaneously, maximizing the use of available CPU resources. You can use parallel programming models like OpenMP, MPI, or CUDA to parallelize your code.\n\n3. **Checkpointing and Restarting**: If your jobs are computationally intensive and require a long runtime, you can use checkpointing and restarting techniques to save the state of your job at regular intervals. This allows you to resume from the last checkpoint in case of preemption or system failure, without losing significant computational progress. You can refer to the NERSC documentation on [checkpoint-restart](https://docs.nersc.gov/development/checkpoint-restart/mana/#perlmutter-cpu) for more information on implementing checkpointing and restarting in your code.\n\n4. **Optimizing I/O**: Minimizing the amount of input/output (I/O) operations in your code can significantly improve its performance. You can use techniques like buffering, caching, and asynchronous I/O to optimize I/O operations.\n\n5. **Profiling and Optimizing Code**: Regularly profile your code to identify performance bottlenecks and optimize them. You can use profiling tools like Intel VTune, OProfile, or Valgrind to analyze your code's performance and identify areas for improvement.\n\n6. **Using Efficient Libraries**: Use efficient libraries for specific tasks like linear algebra, numerical integration, or data manipulation. Libraries like Intel's MKL, OpenBLAS, Eigen, or Armadillo can provide significant performance improvements over built-in functions or less optimized libraries.\n\n7. **Compiling with Optimization Flags**: Compile your code with optimization flags to enable the compiler to generate more efficient machine code. For example, you can use flags like `-O3`, `-funroll-loops`, or `-march` to optimize your code for specific CPU architectures.\n\n8. **Using SIMD Instructions**: SIMD (Single Instruction, Multiple Data) instructions allow a single instruction to perform the same operation on multiple data elements simultaneously. You can use SIMD instructions provided by CPU architectures like AVX, AVX2, or AVX-512 to speed up your code.\n\n9. **Optimizing Memory Access**: Minimize cache misses and optimize memory access patterns in your code to improve performance. You can use techniques like loop tiling, blocking, or cache-aware algorithms to optimize memory access.\n\n10. **Using GPU Acceleration**: If your code can be parallelized and has a significant amount of floating-point operations, you can use GPU acceleration to speed up your code. You can use programming models like CUDA or OpenCL to write GPU-accelerated code.\n\nRemember, optimizing code for performance is an iterative process, and it may require multiple rounds of testing, profiling, and optimization to achieve the best results. Always keep an eye on your code's performance and make necessary adjustments to improve it over time.\n\nReferences:\n * <https://docs.nersc.gov/applications/vasp/examples/long-time.sh>\n * <https://docs.nersc.gov/development/checkpoint-restart/mana/#perlmutter-cpu>\n * <https://docs.nersc.gov/jobs/troubleshooting/#troubleshooting-jobs>",
    "17": "To submit a job to Perlmutter, you can follow these steps:\n\n1. Prepare a job script, which can be a sample script provided by NERSC or one you create yourself. For example, you can use the sample script for running VASP 6 on Perlmutter CPU nodes:\n\n```slurm\n--8<-- \"docs/applications/vasp/examples/perlmutter-cpu-v6.sh\"\n```\n\n2. Submit the job script to the batch system using the `sbatch` command:\n\n```shell\nnersc$ sbatch run.slurm\n```\n\n3. Alternatively, you can use the SF API to submit the job. Here's an example of how to do it in Python:\n\n```python\nsystem = \"perlmutter\"\nsubmit_script = \"<path to script>\" # (e.g., /global/homes/u/username/script.sub)\nr = session.post(\"https://api.nersc.gov/api/v1.2/compute/jobs/\"+system,\n                  data = {\"job\": submit_script, \"isPath\": True})\nprint(r.json())\n```\n\nThe result output will include the SF API task ID, the status of the `POST` request, and any error text. However, note that the `POST` request status does not indicate the job submission status.\n\nRemember to check the [Queue Policy](https://docs.nersc.gov//global/cfs/cdirs/nstaff/chatbot/production_code/data/nersc_doc/docs/jobs/policy/) page for the available QOS settings and their resource limits.\n\nFor more information and examples, you can refer to the NERSC documentation on [batch job submission](https://docs.nersc.gov/services/sfapi/examples/#batch-job-submission) and [job scripts](https://docs.nersc.gov/tutorials/playbooks/running/#step-4-write-a-batch-script).\n\nReferences:\n * <https://docs.nersc.gov/tutorials/playbooks/running/#step-4-write-a-batch-script>\n * <https://docs.nersc.gov/services/sfapi/examples/#batch-job-submission>",
    "18": "To set up Multi-Factor Authentication (MFA) at NERSC, you need to follow these steps:\n\n1. Click the 'MFA not working?' link on the [Iris login page](https://iris.nersc.gov).\n\n2. Enter your username and password. Click OK.\n\n3. A dialog box shows up and asks if you want to create a MFA token. Click OK.\n\n4. A new dialog box will show up. If you have entered the correct password, NERSC will send an email. The email contains a single-use One-Time Password (OTP).\n\n5. Use the OTP to log into Iris. [Create and install a new MFA token](https://docs.nersc.gov//global/cfs/cdirs/nstaff/chatbot/production_code/data/nersc_doc/docs/connect/#creating-and-installing-a-token). If your previous MFA tokens are lost forever, make sure to delete them all.\n\n6. If a NERSC resource doesn't support MFA yet, you can login to that resource with your NERSC password only.\n\n\n\nReferences:\n * <https://docs.nersc.gov/connect/mfa/#if-you-lost-your-tokens>\n * <https://docs.nersc.gov/connect/mfa/#q-what-if-a-nersc-resource-doesnt-support-mfa-yet>",
    "19": "There are several reasons why you might not be able to log in to NERSC systems:\n\n1. **Login Failures:** If you have ten login failures while entering your password on a NERSC resource, your login privileges will be disabled. However, don't worry! Your login failures will automatically clear after 5 minutes, and no additional actions are necessary.\n\n2. **IP Addresses in the 10.42.0.0/16 Range:** If you are accessing NERSC systems from outside the network, you might notice that your web service access log shows IP addresses in the 10.42.0.0/16 range. This is because web services in Spin are made accessible externally by an _ingress controller_, which is a web proxy. Most web services, by default, will log accesses as originating from the IP address of the ingress controller rather than that of the user's workstation. To change this behavior, configure your web service to obtain the IP address from the `X-Forwarded-For` HTTP header, which is a convention for passing this information through web proxies. The ingress controller in Spin is already configured to populate the IP address into the `X-Forwarded-For` HTTP header.\n\n3. **MFA Timeouts:** If you are using multi-factor authentication (MFA) and experience login timeouts, you can follow these steps to resolve the issue:\n\n   - If the login failures are with a particular host (e.g., Perlmutter) only, log in to your Iris account at [https://iris.nersc.gov/](https://iris.nersc.gov/). Select the 'Profile' tab, and click the 'Account Locked?' button, then click the 'Unlock Account' button in the dialog box that appears. This will clear the login failures for the host, and you can try logging in again.\n\n   - If you enter incorrect one-time passwords (OTPs) too many times, the NERSC MFA server will lock you out. In this case, you have to wait for 15 minutes before trying again.\n\n4. **Ssh Key Authentication Issues:** If you are using ssh key authentication via `sshproxy.sh`, check if the keys have expired. A popular way of using ssh key authentication is via ssh-agent, the \"authentication agent.\" You add an ssh private key to ssh-agent, and it uses the key to authenticate to a remote host that has the matching public key. If you have many keys stored in ssh-agent, including the correct one, login can fail if the correct key is not selected within the first six tries. To see how many keys are stored in `ssh-agent`, run the command `ssh-add -l` on your laptop/desktop. If you see many keys there, you can delete all of them to resolve the issue.\n\n5. **Firewall or Network Issues:** If you are unable to connect to NERSC systems due to firewall or network issues, try the following steps:\n\n   - Log in to [Iris](https://iris.nersc.gov) to clear any login failures. Access to NoMachine uses your NERSC user name and password. If your password is mistyped five times, NERSC will lock you out of its systems. Logging into Iris will automatically clear these failures. This will also let you know if your password is expired (which would prevent you from accessing NoMachine, among many other things).\n\n   - Create a new connection file following the instructions provided in the NERSC documentation. NX will often update the configuration file to save settings, and occasionally incorrect settings can be saved. You must have the new NoMachine player AND an updated configuration file to connect to the NoMachine service.\n\n   - Try to ssh directly to the NoMachine server. This will help to distinguish if you are having a connection issue that is specific to NoMachine or a general SSH connection issue. You can do this with the command `ssh <nersc_username>@nxcloud01.nersc.gov` and your NERSC user name and password+one-time MFA password (with no spaces in between). If your access to the NoMachine server is blocked by a local firewall or something else and you can't access it, you will receive an error message indicating the issue.\n\n6. **Account Support Office:** If you are still unable to log in or have any other questions or concerns, you can contact the NERSC Account Support Office by sending an email to [accounts@nersc.gov](mailto:accounts@nersc.gov). They will be able to assist you with any login or account-related issues.\n\nRemember, if you need the head-node only (e.g., for DMTCP applications), you can request access to the head-node by using the `scontrol show job <jobid> | grep -oP 'BatchHost=\\K\\w+'` command.\n\nBy following these steps and troubleshooting tips, you should be able to resolve any login issues and access NERSC systems successfully.\n\nReferences:\n * <https://docs.nersc.gov/iris/iris-for-users/#problems-accessing-iris>\n * <https://docs.nersc.gov/connect/mfa/#q-i-have-enabled-mfa-my-logins-fail-repeatedly-what-should-i-do>\n * <https://docs.nersc.gov/connect/nx/#troubleshooting-nx-connection-failures>\n * <https://docs.nersc.gov/development/languages/python/faq-troubleshooting/#why-does-my-mpi4py-time-out-or-why-is-it-so-slow>\n * <https://docs.nersc.gov/services/spin/faq/#why-are-ip-addresses-in-the-10420016-range-showing-in-my-web-service-access-log>\n * <https://docs.nersc.gov/accounts/passwords/#login-failures>",
    "20": "When deciding which file system to use for storing your data at NERSC, it's important to consider the purpose and performance of each file system. Here are some general guidelines:\n\n1. **Home**: This file system is designed for individual users and provides a convenient location for storing personal files and scripts. It's not recommended for large-scale data storage or production I/O tasks.\n\n2. **Common**: The Common file system is intended for project-level storage and offers a larger storage capacity compared to the Home file system. It's suitable for storing project-related data that needs to be accessed by multiple users within the same project.\n\n3. **Community**: Similar to the Common file system, the Community file system is also designed for project-level storage. It provides a larger storage capacity and is suitable for storing project-related data that needs to be accessed by multiple users within the same project.\n\n4. **Perlmutter Scratch**: This file system is specifically designed for high-performance I/O tasks and provides the fastest access to data. It's ideal for storing large volumes of data that need to be accessed quickly during computation. However, it's important to note that the data stored in the Perlmutter Scratch file system is not backed up, so make sure you have at least one copy of your data at another institution or cloud service.\n\n5. **HPSS**: The HPSS (High-Performance Storage System) is a long-term storage solution designed for archiving data that is not frequently accessed. It's suitable for storing large amounts of data that need to be stored for an extended period.\n\nTo optimize your code's performance on NERSC systems, it's crucial to focus on vectorization and parallelization. Vectorization allows your code to process multiple data points with a single instruction, effectively reducing the time your code takes to run through large datasets. Parallelization, on the other hand, involves dividing your code into multiple tasks that can be processed simultaneously, maximizing the use of available CPU resources. Combining these two strategies can lead to significant improvements in your code's performance on NERSC systems.\n\n\n\nReferences:\n * <https://docs.nersc.gov/performance/io/#best-practices-for-scientific-io>\n * <https://docs.nersc.gov/filesystems/#local-storage>\n * <https://docs.nersc.gov/performance/io/dvs/#read-your-data-from-the-right-place>\n * <https://docs.nersc.gov/filesystems/#summary>"
}
